<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- 自定义项目名称  -->
    <property name="APP_NAME" value="hospital"/>
    <!-- 自定义日志目录 若线上部署环境需调整 如：/usr/local/${APP_NAME}/logs -->
    <property name="LOG_PATH" value="/soft/logs"/>
    <property name="CONSOLE_LOG_PATTERN"
              value="${CONSOLE_LOG_PATTERN:-%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <property name="FILE_LOG_PATTERN"
              value="${FILE_LOG_PATTERN:-%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <property name="console.log.pattern"
              value="${yyyy-MM-dd HH:mm:ss} ${LOG_LEVEL_PATTERN} %green([%thread]) %highlight(%-5level) %boldMagenta(%logger{36}%n) - %msg%n"/>
    <property name="log.pattern" value="%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"/>
    <property name="console.log.pattern"
              value="%red(%d{yyyy-MM-dd HH:mm:ss}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger{36}%n) - %msg%n"/>
    <property name="log.pattern" value="%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"/>

    <!-- 时间滚动输出 level为 DEBUG 日志 -->
    <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/debug.log</file>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <!-- 日志归档 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/debug/log-debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 每产生一个日志文件，该日志文件的保存期限为60天，每天归档 -->
            <maxHistory>60</maxHistory>
            <!-- 单个文件达到最大10MB时开始切分 -->
            <maxFileSize>50MB</maxFileSize>
            <!-- 当日志容量超过5GB，即使没有到保存期限的1天也会开启日志清理 -->
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
        <!-- 此日志文件只记录debug级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>debug</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 时间滚动输出 level为 INFO 日志 -->
    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/info.log</file>
        <encoder>
            <charset>UTF-8</charset>
            <!-- 引用默认的配置项 -->
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <!-- 日志归档 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/info/log-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxHistory>60</maxHistory>
            <maxFileSize>50MB</maxFileSize>
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
        <!-- 此日志文件只记录info级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>info</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 时间滚动输出 level为 WARN 日志 -->
    <appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/warn.log</file>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <!-- 日志归档 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/warn/log-warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxHistory>60</maxHistory>
            <maxFileSize>50MB</maxFileSize>
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
        <!-- 此日志文件只记录warn级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>warn</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 时间滚动输出 level为 ERROR 日志 -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/error.log</file>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <!-- 日志归档 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/error/log-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxHistory>60</maxHistory>
            <maxFileSize>50MB</maxFileSize>
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
        <!-- 此日志文件只记录error级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 控制台输出 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!--输出level以及以上的级别-->
            <level>${log.level}</level>
        </filter>
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>
    <appender name="async" class="ch.qos.logback.core.AsyncAppenderBase">
        <!--指定具体的apperder-->
        <appender-ref ref="CONSOLE"/>
    </appender>

    <!--    过滤-->
    <logger name="org.springframework.web.servlet.DispatcherServlet" level="ERROR" additivity="false"/>
    <logger name="org.mybatis.spring.SqlSessionUtils" level="ERROR" additivity="false"/>
    <logger name="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping" level="ERROR" additivity="false"/>
    <logger name="org.springframework.web.servlet.view.ContentNegotiatingViewResolver" level="ERROR"
            additivity="false"/>
    <logger name="org.springframework.jdbc.datasource" level="ERROR" additivity="false"/>
    <logger name="org.mybatis.spring.transaction.SpringManagedTransaction" level="ERROR" additivity="false"/>
    <logger name="org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManager" level="ERROR"
            additivity="false"/>
    <logger name="org.springframework.web.servlet.mvc.method.annotation" level="ERROR" additivity="false"/>

    <!--    <root level="${log.level}">-->
    <!--        <appender-ref ref="DEBUG_FILE" />-->
    <!--        <appender-ref ref="INFO_FILE" />-->
    <!--        <appender-ref ref="WARN_FILE" />-->
    <!--        <appender-ref ref="ERROR_FILE" />-->
    <!--        <appender-ref ref="CONSOLE" />-->
    <!--    </root>-->

    <!--    &lt;!&ndash; 开发、测试环境 &ndash;&gt;-->
    <springProfile name="dev,test">
        <root level="${log.level}">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="INFO_FILE"/>
            <appender-ref ref="WARN_FILE"/>
            <appender-ref ref="ERROR_FILE"/>
            <appender-ref ref="DEBUG_FILE"/>
        </root>
    </springProfile>
    <!--    &lt;!&ndash; 生产环境 &ndash;&gt;-->
    <springProfile name="prop">
        <root level="${log.level}">
            <!--            <appender-ref ref="CONSOLE" />-->
            <appender-ref ref="INFO_FILE"/>
            <appender-ref ref="WARN_FILE"/>
            <appender-ref ref="ERROR_FILE"/>
            <appender-ref ref="DEBUG_FILE"/>
        </root>
    </springProfile>

</configuration>